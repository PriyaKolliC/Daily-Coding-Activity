Question: config files added
	* Given a sequence of n integers a1, a2, ..., an, a 132 pattern is a subsequence ai, aj, ak such that i < j < k and ai < ak < aj. 
	Design an algorithm that takes a list of n numbers as input and checks whether there is a 132 pattern in the list.
		
		Note: n will be less than 15,000.

		Example 1:
			Input: [1, 2, 3, 4]
			Output: False
			Explanation: There is no 132 pattern in the sequence.
		
		Example 2:
			Input: [3, 1, 4, 2]
			Output: True
			Explanation: There is a 132 pattern in the sequence: [1, 4, 2].
			
		Example 3:
			Input: [-1, 3, 2, 0]
			Output: True
			Explanation: There are three 132 patterns in the sequence: [-1, 3, 2], [-1, 3, 0] and [-1, 2, 0].		
			
Approach 1: 
	* Brute force time limit exceeded.
	* Check every possible pair for a_i < a_k < a_j
	class Solution {
		public boolean find132pattern(int[] nums) {
			boolean res = false;
			if(nums.length <= 2)
				return res;
			int n = nums.length;
			for(int i = 0; i < n - 2; i++){
				for(int j = i + 1; j < n - 1; j++){
					for(int k = j + 1; k < n; k++){
						if((nums[i] < nums[k]) && (nums[k] < nums[j])){
								res = true;
								break;
						}
					}
				}
			}
			return res;
		}
	}
	
Approach 2:
	* Improvized on a_i
	* From the condition a_i < a_k < a_j we can notice that a_k is in the range (a_i, a_j)
	* So to increase the probability of a_k occuring in (a_i, a_j) we need to keep the range as wide as possible for each a_j 
	which is why we choose the minimum a_i for each a_j

	class Solution {
		public boolean find132pattern(int[] nums) {
			int min_i = Integer.MAX_VALUE;
			for (int j = 0; j < nums.length - 1; j++) {
				min_i = Math.min(min_i, nums[j]);
				for (int k = j + 1; k < nums.length; k++) {
					if (nums[k] < nums[j] && min_i < nums[k])
						return true;
				}
			}
			return false;
		}
	}