Question:
	Design a Tic-tac-toe game that is played between two players on a n x n grid.

	You may assume the following rules:

	A move is guaranteed to be valid and is placed on an empty block.
	Once a winning condition is reached, no more moves is allowed.
	A player who succeeds in placing n of their marks in a horizontal, vertical, or diagonal row wins the game.
	Example:
		Given n = 3, assume that player 1 is "X" and player 2 is "O" in the board.

		TicTacToe toe = new TicTacToe(3);

		toe.move(0, 0, 1); -> Returns 0 (no one wins)
		|X| | |
		| | | |    // Player 1 makes a move at (0, 0).
		| | | |

		toe.move(0, 2, 2); -> Returns 0 (no one wins)
		|X| |O|
		| | | |    // Player 2 makes a move at (0, 2).
		| | | |

		toe.move(2, 2, 1); -> Returns 0 (no one wins)
		|X| |O|
		| | | |    // Player 1 makes a move at (2, 2).
		| | |X|

		toe.move(1, 1, 2); -> Returns 0 (no one wins)
		|X| |O|
		| |O| |    // Player 2 makes a move at (1, 1).
		| | |X|

		toe.move(2, 0, 1); -> Returns 0 (no one wins)
		|X| |O|
		| |O| |    // Player 1 makes a move at (2, 0).
		|X| |X|

		toe.move(1, 0, 2); -> Returns 0 (no one wins)
		|X| |O|
		|O|O| |    // Player 2 makes a move at (1, 0).
		|X| |X|

		toe.move(2, 1, 1); -> Returns 1 (player 1 wins)
		|X| |O|
		|O|O| |    // Player 1 makes a move at (2, 1).
		|X|X|X|

Approach 1:
	* We can simply check the row, col, and diagonals for each move.
			class TicTacToe {
			int[][] grid;
			int full;
			/** Initialize your data structure here. */
			public TicTacToe(int n) {
				full = n;
				grid = new int[n][n];
			}
			
			/** Player {player} makes a move at ({row}, {col}).
				@param row The row of the board.
				@param col The column of the board.
				@param player The player, can be either 1 or 2.
				@return The current winning condition, can be either:
						0: No one wins.
						1: Player 1 wins.
						2: Player 2 wins. */
			public int move(int row, int col, int player) {
				
				
				grid[row][col] = player;
				
				int r = 0, c = 0;
			   
				//horizontal
				while(c < full && grid[row][c] == player)
					c++;
				
				if(c == full)
					return player;
				
				
				//vertical
				while(r < full && grid[r][col] == player)
					r++;
				if(r == full)
					return player;
				
				r = 0;
				c = 0;
					
				//diagonal 1
				while(r < full && c < full && grid[r][c] == player ){
					r++;
					c++;
				}

				if(r == full && c == full)
					return player;

				r = 0;
				c = full - 1;
				
				//diagonal 2
				while(r < full && c >= 0 && grid[r][c] == player){
					r++;
					c--;
				}

				if(r == full && c == -1)
					return player;
			
				return 0;
			}
		}
		/**
		 * Your TicTacToe object will be instantiated and called as such:
		 * TicTacToe obj = new TicTacToe(n);
		 * int param_1 = obj.move(row,col,player);
		 */


Approach 2:
	* We can do much better in time for each move.
	* Update the value of row, col, diagonals for each move. 
	* Increment the value by 1 if player 1 moves and decrement the value by 1 if player 2 moves.
	
		class TicTacToe {
			private int[] rows;
			private int[] cols;
			private int diagonal1;
			private int diagonal2;

			/** Initialize your data structure here. */
			public TicTacToe(int n) {
				rows = new int[n];
				cols = new int[n];
			}
			
			/** Player {player} makes a move at ({row}, {col}).
				@param row The row of the board.
				@param col The column of the board.
				@param player The player, can be either 1 or 2.
				@return The current winning condition, can be either:
						0: No one wins.
						1: Player 1 wins.
						2: Player 2 wins. */
			public int move(int row, int col, int player) {
				int n = rows.length;
				int move = player == 1 ? 1 : -1;
				rows[row] += move;
				cols[col] += move;
				
				if (row == col) {
					diagonal1 += move;
				}
				if (row + col == n - 1) {
					diagonal2 += move;
				}
				
				if (Math.abs(rows[row]) == n || Math.abs(cols[col]) == n || Math.abs(diagonal1) == n || Math.abs(diagonal2) == n) {
					return player;
				}
				return 0;
			}
		}

		/**
		 * Your TicTacToe object will be instantiated and called as such:
		 * TicTacToe obj = new TicTacToe(n);
		 * int param_1 = obj.move(row,col,player);
		 */
	
	