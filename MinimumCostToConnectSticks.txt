Question:

You have some sticks with positive integer lengths.
You can connect any two sticks of lengths X and Y into one stick by paying a cost of X + Y.  You perform this action until there is one stick remaining.
Return the minimum cost of connecting all the given sticks into one stick in this way.

	Example 1:
		Input: sticks = [2,4,3]
		Output: 14
	Example 2:
		Input: sticks = [1,8,3,5]
		Output: 30
	Constraints:
		1 <= sticks.length <= 10^4
		1 <= sticks[i] <= 10^4

My Approach:
	* The idea is to first sort the array to minimize the cost while joining the sticks.
	* This way the cumulative cost in the end would also be minimized.
	* Note: The array has to be sorted after each join of the sticks. Why?
		Consider the example [3,6,7,8]. This array is initially sorted.
		Join 1: [3 + 6, 7, 8] = [9, 7, 8]. The resultant array is unsorted which is why it cannot give minimum cost to join if we donot sort it again.
	* You get timelimit exceeded when we try to sort array after join using labor sorting
	* Using heap sort to sort array just by adding resultant sum to array is efficient
	
class Solution {
    public int connectSticks(int[] sticks) {
        int cost = 0;
        PriorityQueue<Integer> pq = new PriorityQueue<Integer>((x, y) -> x - y);
        for(int n: sticks)
            pq.add(n);
        int n1 = 0, n2 = 0, n = 0;
        while(!pq.isEmpty()){
            n1 = pq.poll();
            n2 = pq.isEmpty() ? 0 : pq.poll();
            if(n2 != 0){
                n = n1 + n2;
                cost += n;
                pq.add(n);
            }
        }
        return cost;
    }
}