Question:
	* Given a binary tree, return the values of its boundary in anti-clockwise direction starting from root. 
	Boundary includes left boundary, leaves, and right boundary in order without duplicate nodes.  
	(The values of the nodes may still be duplicates.)
	
	* Left boundary is defined as the path from root to the left-most node. 
	Right boundary is defined as the path from root to the right-most node. 
	If the root doesn't have left subtree or right subtree, then the root itself is left boundary or right boundary. 
	Note this definition only applies to the input binary tree, and not applies to any subtrees.
	
	* The left-most node is defined as a leaf node you could reach when you always firstly travel to the left subtree if exists. 
	If not, travel to the right subtree. Repeat until you reach a leaf node.
	
	* The right-most node is also defined by the same way with left and right exchanged.

		Example 1

		Input:
		  1
		   \
			2
		   / \
		  3   4

		Ouput:
		[1, 3, 4, 2]

		Explanation:
			The root doesn't have left subtree, so the root itself is left boundary.
			The leaves are node 3 and 4.
			The right boundary are node 1,2,4. Note the anti-clockwise direction means you should output reversed right boundary.
			So order them in anti-clockwise without duplicates and we have [1,3,4,2].
 

		Example 2

		Input:
			____1_____
		   /          \
		  2            3
		 / \          / 
		4   5        6   
		   / \      / \
		  7   8    9  10  
			   
		Ouput:
		[1,2,4,7,8,9,10,6,3]

		Explanation:
			The left boundary are node 1,2,4. (4 is the left-most node according to definition)
			The leaves are node 4,7,8,9,10.
			The right boundary are node 1,3,6,10. (10 is the right-most node).
			So order them in anti-clockwise without duplicate nodes we have [1,2,4,7,8,9,10,6,3].
Approach 1:
	* Simply traverse the left boundary, then leaves and right boundary(in reverse).
	* One point to note is cases like below might occur
				1
			2
				4
		where 1 is root, 2 is left child and there is no left child for 2. In this case 4 goes into the left boundary and not null.
	* Same is the case to consider when doing right
				1
					2
				4
		Here 2 doesnt have right child and has left child 4. So 4 goes into the right boundary.
		
		class Solution {
			List<Integer> res = new ArrayList();    
			public List<Integer> boundaryOfBinaryTree(TreeNode root) {
				if(root == null)
					return res;
				if(!leaf(root))
					res.add(root.val);
				//left boundary
				TreeNode t = root.left;
				while(t != null){
					if(!leaf(t))
						res.add(t.val);
					if(t.left != null)
						t = t.left;
					else
						t = t.right;
				}
				
				//to add leaves
				addLeaves(root);
				
				//right boundary in reverse
				Stack<Integer> s = new Stack<Integer>();
				t = root.right;
				while(t != null){
					if(!leaf(t))
						s.push(t.val);
					if(t.right != null)
						t = t.right;
					else
						t = t.left;
				}
				while(!s.empty())
					res.add(s.pop());
				
				return res;
			}
			public boolean leaf(TreeNode node){
				return node.left == null && node.right == null;
			}
			public void addLeaves(TreeNode node){
				if(leaf(node))
					res.add(node.val);
				else{
					if(node.left != null)
						addLeaves(node.left);
					if(node.right != null)
						addLeaves(node.right);
				}
			}
		}
		
		
Approach 2:
	* The other approach is to do preorder traversal.
	* With flags for each node
		0 - root node
		1 - left node
		2 - right node
		3 - all other nodes except leaf nodes
		
		
		class Solution {
			public List<Integer> boundaryOfBinaryTree(TreeNode root) {
				List<Integer> lb = new ArrayList(), rb = new ArrayList(), leaves = new ArrayList();
				pre_order(root, lb, rb, leaves, 0);
				lb.addAll(leaves);
				lb.addAll(rb);
				return lb;
			}
			public void pre_order(TreeNode node, List<Integer> lb,List<Integer> rb, List<Integer> leaves, int flag){
				if(node == null)
					return;
				if(flag == 1 || flag == 0)
					lb.add(node.val);
				else if(flag == 2)
					rb.add(0, node.val);
				else if(isLeaf(node))
					leaves.add(node.val);
				
				pre_order(node.left, lb, rb, leaves, left_flag(node, flag));
				pre_order(node.right, lb, rb, leaves, right_flag(node, flag));
			}
			public boolean isLeaf(TreeNode node){
				return node.left == null && node.right == null;
			}
			public int right_flag(TreeNode node, int flag){
				if(flag == 2 || flag == 0)
					return 2;
				if(flag == 1 && node.left == null)
					return 1;
				return 3;
			}
			public int left_flag(TreeNode node, int flag){
				if(flag == 1 || flag == 0)
					return 1;
				if(flag == 2 && node.right == null)
					return 2;
				return 3;
				
			}
		}