Question:
	* We are given some website visits: the user with name username[i] visited the website website[i] at time timestamp[i].
	* A 3-sequence is a list of websites of length 3 sorted in ascending order by the time of their visits.  
	(The websites in a 3-sequence are not necessarily distinct.)
	* Find the 3-sequence visited by the largest number of users. If there is more than one solution, 
	return the lexicographically smallest such 3-sequence.

	Example 1:

		Input: username = ["joe","joe","joe","james","james","james","james","mary","mary","mary"], timestamp = [1,2,3,4,5,6,7,8,9,10], website = ["home","about","career","home","cart","maps","home","home","about","career"]
		Output: ["home","about","career"]
		Explanation: 
			The tuples in this example are:
			["joe", 1, "home"]
			["joe", 2, "about"]
			["joe", 3, "career"]
			["james", 4, "home"]
			["james", 5, "cart"]
			["james", 6, "maps"]
			["james", 7, "home"]
			["mary", 8, "home"]
			["mary", 9, "about"]
			["mary", 10, "career"]
			The 3-sequence ("home", "about", "career") was visited at least once by 2 users.
			The 3-sequence ("home", "cart", "maps") was visited at least once by 1 user.
			The 3-sequence ("home", "cart", "home") was visited at least once by 1 user.
			The 3-sequence ("home", "maps", "home") was visited at least once by 1 user.
			The 3-sequence ("cart", "maps", "home") was visited at least once by 1 user.
		 
		Note:
			3 <= N = username.length = timestamp.length = website.length <= 50
			1 <= username[i].length <= 10
			0 <= timestamp[i] <= 10^9
			1 <= website[i].length <= 10
			Both username[i] and website[i] contain only lowercase characters.
			It is guaranteed that there is at least one user who visited at least 3 websites.
			No user visits two websites at the same time.
			
Approach:
	* Tedious task. Just proceed according to the description. The phases of the solution includes obtaining:
		1. tuples with ascending order of timestamp
			["joe", 1, "home"]
			["joe", 2, "about"]
			["joe", 3, "career"]
			["james", 4, "home"]
			["james", 5, "cart"]
			["james", 6, "maps"]
			["james", 7, "home"]
			["mary", 8, "home"]
			["mary", 9, "about"]
			["mary", 10, "career"]
		2. List of websites visited for each user
			[Joe -> home, about, career]
			[James -> home, cart, maps, home]
			[Mary -> home, about, career]
		3. Now obtain 3sequences for all the websites of all users
			[home,about,career] from joe
			[home,cart,maps], [home,maps,home], [cart,maps,home] from James
			[home,about,career] from mary
			while obtaining the above "3-sequences" put them in hashmap to have a note of visited count
			[home,about,career] : 1
			[home,cart,maps] : 1
			[home,maps,home] : 1
			[cart,maps,home]
			[home,about,career] : 1 + 1 
			
			
			class Solution {
				public List<String> mostVisitedPattern(String[] username, int[] timestamp, String[] website) {
					List<List<String>> tuples = new ArrayList();
					int n = username.length;
					
					for(int i = 0; i < n; i++){
						tuples.add(new ArrayList<String>());
						tuples.get(i).add(username[i]);
						tuples.get(i).add(String.valueOf(timestamp[i]));
						tuples.get(i).add(website[i]);
					}
					tuples.sort((t1, t2) -> Integer.parseInt(t1.get(1)) - Integer.parseInt(t2.get(1)));
					
					Map<String, List<String>> input = new HashMap<String, List<String>>();
					
					for(List<String> tuple : tuples){
						String user = tuple.get(0);
						if(!input.containsKey(user))
							input.put(user, new ArrayList<String>());
						input.get(user).add(tuple.get(2));
					}
					
					int mc = 0;
					String res = "";
					Map<String, Integer> visited = new HashMap<String, Integer>();
					for(String key : input.keySet()){
						List<String> websites = input.get(key);
						
						if(websites.size() >= 3){
							Set<String> three_sequences = three_sequence(websites);
							for(String threeseq : three_sequences){
								visited.put(threeseq, visited.getOrDefault(threeseq, 0) + 1);
								if(visited.get(threeseq) > mc){
									mc = visited.get(threeseq);
									res = threeseq;
								}
								else if(visited.get(threeseq) == mc && threeseq.compareTo(res) < 0)
									res = threeseq;
							}
							
						}
					}
					String[] t = res.split(",");
					List<String> ans = new ArrayList();
					for(String s:t)
						ans.add(s);
					return ans;
					
				}
				public Set<String> three_sequence(List<String> websites){
					int n = websites.size();
					Set<String> tempset = new HashSet();
					for(int i = 0; i < n - 2; i++){
						for(int j = i + 1; j < n - 1; j++){
							for(int k = j + 1; k < n; k++){
								tempset.add(websites.get(i) + "," + websites.get(j) + "," + websites.get(k));
							
							}
						}
					}
					return tempset;
				}
			}