Question:
	* Find the smallest prime palindrome greater than or equal to N.
	* Recall that a number is prime if it's only divisors are 1 and itself, and it is greater than 1. 
	* For example, 2,3,5,7,11 and 13 are primes.
	* Recall that a number is a palindrome if it reads the same from left to right as it does from right to left. 
	* For example, 12321 is a palindrome.
		Example 1:
			Input: 6
			Output: 7
		Example 2:
			Input: 8
			Output: 11
		Example 3:
			Input: 13
			Output: 101
		Note:
			1 <= N <= 10^8
			The answer is guaranteed to exist and be less than 2 * 10^8.
Approach 1:
	* Brute force checking every number after N if its prime or palindrome.
	class Solution {
		public int primePalindrome(int N) {
			if(N < 2)
				return 2;
			if(isPrime(N) && isPalindrome(N))
				return N;
			N++;
			boolean cont = true;
			while(cont){
				System.out.println(N);
				if(!isEven(N)){
					if(isPrime(N) && isPalindrome(N))
						break;
				}
				N++;
			}
			return N;
		}
		public boolean isEven(int n){
			return n % 2 == 0;
		}
		public boolean isPrime(int n){
			for(int i = 2; i <= Math.sqrt(n); i++)
				if(n % i == 0)
					return false;
			return true;
		}
		public boolean isPalindrome(int n){
			int rev = 0;
			while(n > rev){
				rev = rev * 10 + n % 10;
				n /= 10;
			}
			return n == rev || n == rev/10;
		}
	}
	
Approach 2:
	* Generate palindromes and check if they are prime
	class Solution {
		public int primePalindrome(int N) {
			for (int L = 1; L <= 5; ++L) {
				for (int root = (int)Math.pow(10, L - 1); root < (int)Math.pow(10, L); ++root) {
					StringBuilder sb = new StringBuilder(Integer.toString(root));
					for (int k = L-2; k >= 0; --k)
						sb.append(sb.charAt(k));
					int x = Integer.valueOf(sb.toString());
					if (x >= N && isPrime(x))
						return N <= 11 ? Math.min(x, 11) : x;
				}
			}

			throw null;
		}

		public boolean isPrime(int N) {
			if (N < 2) return false;
			int R = (int) Math.sqrt(N);
			for (int d = 2; d <= R; ++d)
				if (N % d == 0) return false;
			return true;
		}
	}