Question:
	* Write an efficient algorithm that searches for a value in an m x n matrix. 
	* This matrix has the following properties:
		Integers in each row are sorted in ascending from left to right.
		Integers in each column are sorted in ascending from top to bottom.
	Example:

		Consider the following matrix:
		[
		  [1,   4,  7, 11, 15],
		  [2,   5,  8, 12, 19],
		  [3,   6,  9, 16, 22],
		  [10, 13, 14, 17, 24],
		  [18, 21, 23, 26, 30]
		]
		Given target = 5, return true.
		Given target = 20, return false.
		
Approach:
	* We can just traverse the matrix and find if element exists. But this wouldn't efficiently use the property of matrix, that it is sorted.
	* So we can do binary search diagonally on each row and column.
	class Solution {
		public boolean searchMatrix(int[][] matrix, int target) {
			if(matrix == null || matrix.length == 0)
				return false;
			return helper(matrix, 0, target);
		}
		public boolean helper(int[][] matrix, int sp, int target){
			if(sp >= matrix.length || sp >= matrix[0].length)
				return false;
			if(matrix[sp][sp] == target)
				return true;
			int l = sp, r = matrix[0].length - 1, mid = 0;
			while(l <= r){
				mid = (l + r) / 2;
				if(matrix[sp][mid] == target)
					return true;
				else if(target < matrix[sp][mid])
					r = mid - 1;
				else
					l = mid + 1;
			}
			l = sp;
			r = matrix.length - 1;
			mid = 0;
			
			while(l <= r){
				mid = (l + r) / 2;
				if(matrix[mid][sp] == target)
					return true;
				else if(target < matrix[mid][sp])
					r = mid - 1;
				else
					l = mid + 1;
			}
			boolean temp = helper(matrix, sp + 1, target);
			return temp;
			
		}
	}